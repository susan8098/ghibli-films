{"version":3,"sources":["hooks/useApiData.js","components/FilmItem.js","components/FilmsContainer.js","App.js","serviceWorker.js","index.js"],"names":["useApiData","initialUrl","urlEndpoint","useState","url","setUrl","endpoint","setEndpoint","isLoading","setIsLoading","data","setData","useEffect","a","requestUrl","fetch","response","json","apiData","fetchData","FilmItem","props","film","key","id","title","release_date","description","director","rt_score","FilmsContainer","filmsArr","filmData","console","log","className","map","i","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8OA+BeA,EA7BI,SAACC,GAAuC,IAA3BC,EAA0B,uDAAZ,QAAY,EAElCC,mBAASF,GAFyB,mBAEjDG,EAFiD,KAE5CC,EAF4C,OAGxBF,mBAASD,GAHe,mBAGjDI,EAHiD,KAGvCC,EAHuC,OAItBJ,oBAAS,GAJa,mBAIjDK,EAJiD,KAItCC,EAJsC,OAKhCN,qBALgC,mBAKjDO,EALiD,KAK3CC,EAL2C,KA0BxD,OAnBAC,qBAAU,WAaJR,GAXW,uCAAG,gCAAAS,EAAA,6DAChBJ,GAAa,GACPK,EAAaV,EAAME,EAFT,SAGOS,MAAMD,GAHb,cAGVE,EAHU,gBAIMA,EAASC,OAJf,OAIVC,EAJU,OAMhBP,EAAQO,GACRb,IACAI,GAAa,GARG,4CAAH,oDAYbU,KAGD,CAACf,EAAKE,IAEF,CAACI,EAAMF,EAAWD,ICZZa,EAdE,SAACC,GAChB,IAAMC,EAAOD,EAAMC,KAEnB,OACE,yBAAKC,IAAKD,EAAKE,IACb,4BAAKF,EAAKG,OACV,2BAAIH,EAAKI,cACT,2BAAIJ,EAAKK,aACT,2BAAIL,EAAKM,UACT,qCAAWN,EAAKO,YCOPC,EAfQ,SAACT,GACpB,IAAMU,EAAWV,EAAMW,SAGvB,OAFAC,QAAQC,IAAIH,GAGR,8BACI,yBAAKI,UAAU,eACVJ,EAASK,KAAK,SAACd,EAAMe,GAClB,OAAO,kBAAC,EAAD,CAAUf,KAAMA,EAAMC,IAAKc,U,MCqBvCC,MAzBf,WACE,IADa,EAGetC,EAFV,oCADL,mBAGLU,EAHK,KAGCF,EAHD,KAKb,OACE,oCACE,gCACE,yBAAK2B,UAAU,eACb,8CAIH3B,EACC,sCAEAE,GACE,kBAAC,EAAD,CAAgBsB,SAAUtB,MCZhB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.e4544607.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useApiData = (initialUrl, urlEndpoint = 'films') => {\n\n  const [url, setUrl] = useState(initialUrl);\n  const [endpoint, setEndpoint] = useState(urlEndpoint);\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState();\n\n  useEffect(() => {\n\n    const fetchData = async () => {\n      setIsLoading(true);\n      const requestUrl = url + endpoint;\n      const response = await fetch(requestUrl);\n      const apiData = await response.json();\n\n      setData(apiData);\n      setUrl();\n      setIsLoading(false);\n    };\n\n    if (url) {\n      fetchData();\n    }\n\n  }, [url, endpoint]);\n\n  return [data, isLoading, setEndpoint];\n}\n\nexport default useApiData;","import React from 'react';\n\nconst FilmItem = (props) => {\n  const film = props.film;\n\n  return (\n    <div key={film.id}>\n      <h2>{film.title}</h2>\n      <p>{film.release_date}</p>\n      <p>{film.description}</p>\n      <p>{film.director}</p>\n      <p>score: {film.rt_score}</p>\n    </div>\n  )\n}\n\nexport default FilmItem;","import React from 'react';\nimport FilmItem from './FilmItem';\n\nconst FilmsContainer = (props) => {\n    const filmsArr = props.filmData;\n    console.log(filmsArr);\n\n    return (\n        <main>\n            <div className=\"g-Container\">\n                {filmsArr.map( (film, i) => {\n                    return <FilmItem film={film} key={i} />\n                })}\n            </div>\n        </main>\n    )\n}\n\nexport default FilmsContainer;\n","import React from \"react\";\nimport useApiData from './hooks/useApiData';\n\nimport FilmsContainer from './components/FilmsContainer';\n\nimport './App.css';\n\nfunction App() {\n  const ghibliApi = 'https://ghibliapi.herokuapp.com/';\n\n  const [ data, isLoading ] = useApiData(ghibliApi);\n\n  return (\n    <>\n      <header>\n        <div className=\"g-Container\">\n          <h1>Ghibli Films</h1>\n        </div>\n      </header>\n\n      {isLoading ? (\n        <p>Loading</p>\n      ) : (\n        data && (\n          <FilmsContainer filmData={data} />\n        )\n      )}\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}